// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction


//     PARTS:
//     // Put your code here:

//     /* Decode */
//     And(a=instruction[15], b=true, out=decodeResult); //instruction의 15번째 비트가 output이 됨 -> 0 또는 1(A명령어인지 C명령어인지 구분)
//     Not(in=decodeResult, out=decodeResultNot); // A명령어 = 1, C명령어 = 0 으로 뒤집음(FirstMux의 sel비트로 만들기 위함)
//     //END

//     /* First Mux */
//     Mux16(a=ALUoutput, b=instruction, sel=decodeResultNot, out=firstMuxResult);
//     //END

//     /* A Register */
//     ARegister(in=firstMuxResult, load=decodeResultNot, out=AregisterResult); 
//     //decodeResultNot이 1이면(A명령어면) load비트가 1이므로 A레지스터에 주소(0~15비트) 저장, 
//     //decodeResultNot이 0이면(C명령어면) load비트가 0이므로 A레지스터는 그대로 이전 주소값을 가지고 있음.
//     //END

//     /* Second Mux */
//     And(a=instruction[12], b=decodeResult, out=secondMuxC); 
//     // decodeResult가 1이면(C명령어이면) output = instruction[12], decodeResult가 0이면(A명령어이면) output = 0
//     Mux16(a=AregisterResult, b=inM, sel=secondMuxC, out=secondMuxResult);
//     //END

//     /* ALU */
//     ALU(x=DregisterResult, y=secondMuxResult, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
//     out=ALUoutput, out=outM, zr=zr, ng=ng);

//     /* D register */
//     And(a=instruction[15], b=instruction[4], out=DregisterLoadBit);
//     DRegister(in=ALUoutput, load=DregisterLoadBit, out=DregisterResult);

//     /* PC */
//     And(a=instruction[2], b=ng, out=j1Out); //ng 
//     Not(in=ng, out=positive); //not ng
//     And(a=instruction[1], b=zr, out=j2Out); //zr
//     And(a=instruction[0], b=positive, out=j3Out);
//     Or(a=j1Out, b=j2Out, out=or1);
//     Or(a=or1, b=j3Out, out=or2);
//     And(a=instruction[15], b=or2, out=pcLoad);
//     PC(in=AregisterResult, load=pcLoad, inc=true, reset=reset, out=pcOut, out[0..14] = pc);
//     //END

//     /* addressM 으로 보낼 A레지스터의 주소값 */
//     And16(a=AregisterResult, b=true, out = andandOUt, out[0..14]=addressM);
//     //END

//     /* Write M */
//     And(a=instruction[3], b=instruction[15], out=writeM);
//     //END
// }


    /* 내꺼 */
    PARTS:
    // Put your code here:

    /* Decode */
    And(a=instruction[15], b=true, out=decodeResult); //instruction의 15번째 비트가 output이 됨 -> 0 또는 1(A명령어인지 C명령어인지 구분)
    Not(in=decodeResult, out=decodeResultNot); // A명령어 = 1, C명령어 = 0 으로 뒤집음(FirstMux의 sel비트로 만들기 위함)
    //END

    /* First Mux */
    Mux16(a=ALUoutput, b=instruction, sel=decodeResultNot, out=firstMuxResult);
    //END

    /* A Register */
    Or(a=decodeResultNot, b=instruction[5], out=AregisterControlBit);
    ARegister(in=firstMuxResult, load=AregisterControlBit, out=AregisterResult);
    //A register : decodeResultNot이 1이면(A명령어면) load비트가 1이므로 A레지스터에 주소(0~15비트) 저장, 
    //END

    /* Second Mux */
    And(a=instruction[12], b=decodeResult, out=secondMuxC); 
    // decodeResult가 1이면(C명령어이면) output = instruction[12], decodeResult가 0이면(A명령어이면) output = 0
    Mux16(a=AregisterResult, b=inM, sel=secondMuxC, out=secondMuxResult);
    //END

    /* ALU */
    ALU(x=DregisterResult, y=secondMuxResult, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
    out=ALUoutput, zr=zr, ng=ng);
    And(a=instruction[3], b=instruction[15], out=MAndOut);
    Mux16(a=false, b=ALUoutput, sel=MAndOut, out=outM);

    /* D register */
    And(a=instruction[15], b=instruction[4], out=DregisterLoadBit);
    DRegister(in=ALUoutput, load=DregisterLoadBit, out=DregisterResult);

    /* PC */
    And(a=instruction[2], b=ng, out=j1Out); //ng 
    Not(in=ng, out=notNG); //not ng
    Xor(a=notNG, b=zr, out=positive);
    And(a=instruction[1], b=zr, out=j2Out); //zr
    And(a=instruction[0], b=positive, out=j3Out); //positive
    Or(a=j1Out, b=j2Out, out=or1);
    Or(a=or1, b=j3Out, out=or2);
    And(a=instruction[15], b=or2, out=pcLoad);
    PC(in=AregisterResult, load=pcLoad, inc=true, reset=reset, out=pcOut, out[0..14] = pc);
    //END

    /* addressM 으로 보낼 A레지스터의 주소값 */
    And16(a=AregisterResult, b=true, out = andandOUt, out[0..14]=addressM);
    //END

    /* Write M */
    And(a=instruction[3], b=instruction[15], out=writeM, out = writeMClone);
    //END
}